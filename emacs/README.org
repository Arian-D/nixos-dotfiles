#+title: Emacs Config
#+property: header-args:emacs-lisp :tangle ./init.el :results silent 
#+startup: fold

* Understanding this
** Literate
This configuration is [[https://en.wikipedia.org/wiki/Literate_programming][literate]], as in, the file you're reading /is/ the
actual program. Running ~M-x org-babel-tangle~, or if you trusted the
local variables in Emacs, saving the file would create *and* load the
config for you. Pretty neat, huh?
** Inspiration
Although this is a custom config from scratch, a lot of it is heavily
inspired by many other people such as:
- [[https://github.com/tecosaur/emacs-config][Tecosaur]]'s [[https://github.com/hlissner/doom-emacs][Doom Emacs]] config
- [[https://github.com/daviwil][daviwil]]'s [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from scratch]] Youtube series
- [[https://github.com/joseph8th/literatemacs][joseph8th]]'s config
* Essentials
Just simple stuff to get the ball rolling.
** Lexical binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Straight
This is a really cool package manager that is functional like Nix or
Guix, but it doesn't rely on them.
#+begin_src emacs-lisp
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage)
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t))
#+end_src
** Which key
The best helper.
#+begin_src emacs-lisp
(use-package which-key
  :custom (which-key-idle-delay 0.5)
  :config
  (which-key-mode))
#+end_src
** Server
This turns on the server so that there would only be one instance of
Emacs running.
#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** Separate ~custom.el~
Rather than cluttering the ~init.el~ file, this uses a separte file for customs.
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load-file custom-file))
#+end_src

** Notification
#+begin_src emacs-lisp
(use-package alert
  :config
  (setq alert-default-style 'notifications))
#+end_src
** Ivy
I use Ivy for auto-completion, and hasn't let me down. Another nice
alternative is [[https://github.com/emacs-helm/helm][helm]].
#+begin_src emacs-lisp
(use-package ivy
  :custom
  ((ivy-height 15)
   (ivy-use-virtual-buffers t)
   (ivy-count-format "(%d/%d) ")))
#+end_src
Lets make Ivy a little bit easier.
#+begin_src emacs-lisp
(use-package ivy-rich
  :hook (ivy-mode . ivy-rich-mode)
  :custom (ivy-rich-path-style 'abbrev))

(use-package all-the-icons-ivy-rich
  :hook (ivy-rich-mode . all-the-icons-ivy-rich-mode))

#+end_src
** Counsel
Counsel provides sane Ivy-alternatives to the Emacs functions.
#+begin_src emacs-lisp
(use-package counsel
  :after evil
  :defer nil
  :config
  (evil-global-set-key 'normal (kbd "; f") 'counsel-find-file)
  (evil-global-set-key 'normal (kbd "; TAB") 'counsel-M-x)
  (evil-global-set-key 'normal (kbd "; b") 'counsel-switch-buffer)
  :hook (after-init . counsel-mode))
#+end_src
** Mini frame
[[https://github.com/muffinmad/emacs-mini-frame][emacs-mini-frame]] provides a nice [[https://github.com/davatorium/rofi][rofi]]-like frame instead of the
minibuffer. Sadly, it flickers at the moment, hence why it's disabled.
#+begin_src emacs-lisp
(use-package mini-frame
  :disabled
  :custom (mini-frame-show-parameters
           '((top . 100)
             (width . 0.9)
             (left . 0.5)))
  :hook (after-init . mini-frame-mode))
#+end_src
** Evil
The superior keybindings.
*** Chords
~"kj"~ here acts as the escape. This requires the ~use-package-chords~
extension to be enabled.
#+begin_src emacs-lisp
(use-package use-package-chords
  :config (key-chord-mode 1))
#+end_src
*** Evil
Evil, along with some cool keybindings.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :custom (evil-flash-delay 1)
  :config
  (evil-mode 1)
  (evil-global-set-key 'normal (kbd "; q") 'kill-current-buffer)
  (evil-global-set-key 'normal (kbd "; s") 'save-buffer)
  (evil-global-set-key 'normal (kbd "; g") 'keyboard-quit)
  :chords ("kj" . evil-normal-state))
#+end_src
*** Collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]] provides more bindings, since evil is not fully
complete.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
* Appearance
** Defaults
The defaults that come with Emacs are pretty ugly. These settings make
them tolerable.
*** Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
*** Menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
*** Scroll bar
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
#+end_src
*** Splash screen
Replace the default splash screen with an org buffer
#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      inhibit-splash-screen t
      initial-major-mode 'org-mode
      initial-scratch-message "#+TITLE: Let's question reality
,* Begin...
")
#+end_src

** Face
This the default [[https://www.emacswiki.org/emacs/Face][face]]. It uses a patched version of [[https://fontlibrary.org/en/font/fantasque-sans-mono][Fantasque]] from
[[https://github.com/ryanoasis/nerd-fonts][nerd fonts]].
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :width 'expanded
		      :family "FantasqueSansMono Nerd Font"
		      :weight 'normal
		      :height 160)

  (set-face-attribute 'variable-pitch nil
		      :width 'expanded
		      :family "ETBembo"
		      :weight 'normal
		      :height 225)

  (set-face-attribute 'fixed-pitch nil
		      :width 'expanded
		      :family "FantasqueSansMono Nerd Font"
		      :weight 'normal
		      :height 160)
#+end_src
** Theme
Doom themes are very nice. 
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-gruvbox t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src
** Modeline
This is also doom.
#+begin_src emacs-lisp
(use-package doom-modeline
  :after all-the-icons
  :hook (after-init . doom-modeline-mode)
  :custom (doom-modeline-height 15))
#+end_src
*** All the icons
As you see, this package requires ~all-the-icons~ for pretty icons.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
*** Battery
Display battery in modeline.
#+begin_src emacs-lisp
(display-battery-mode 1)
#+end_src
*** Time
Display time in modeline.
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
** Shorter boolean prompt
Instead of having to type =yes=, you can just say =y=.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Development
Afterall, Emacs is a text editor.
** Line numbers
Put line numbers for buffers that should have it.
#+begin_src emacs-lisp
(if (not (version< emacs-version "26.1"))
    (use-package display-line-numbers
      :custom (display-line-numbers-type 'relative)
      :hook (prog-mode . display-line-numbers-mode)))
#+end_src
** Git
Magit
#+begin_src emacs-lisp
(use-package magit
  :after evil
  :config
  (evil-define-key 'normal org-mode-map (kbd "; G") 'magit-status)
  :bind (("C-x g" . magit-status)))
#+end_src
** Forge
Forge is there to eliminate the need to visit GitHub on the browser.
#+begin_src emacs-lisp
(use-package forge
  :after magit)
#+end_src
** Yaml
DevOps is the future, amirite?
#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :after evil
  :init
  (projectile-mode +1)
  :config
  (setq projectile-project-search-path '("~/projects/all/")
        projectile-auto-discover nil
        projectile-completion-system 'ivy)
  (evil-global-set-key 'normal (kbd "; p") 'projectile-command-map)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
and counsel
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src
** Company
Us zoomer programmers can't live without auto-completion.
#+begin_src emacs-lisp
(use-package company
  :hook (after-init . global-company-mode))
#+end_src
** LSP
I use [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] quite extensively for autocompletion, formatting, and
other language features.

#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-keymap-prefix "C-;"))

#+end_src

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] makes things a lot prettier and adds more features.

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode)
#+end_src
** Yasnippet
Currently, I don't have that many snippets, but I do use it for lsp
integration.
#+begin_src emacs-lisp
(use-package yasnippet
  :config
  (yas-reload-all)
  :hook (prog-mode . yas-minor-mode))
#+end_src
** C/C++
For C/C++ language servers I use [[https://github.com/MaskRay/ccls][ccls]], but [[https://clangd.llvm.org/][clangd]], which is the
default LSP in lsp-mode, works just as good.
#+begin_src emacs-lisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred))
#+end_src
** Python
[[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]] is for Microsoft's [[https://github.com/microsoft/pyright][Pyright]] language server which has a
nice typechecker, and I'd prefer it over [[https://github.com/Microsoft/python-language-server][python-language-server]].
#+begin_src emacs-lisp
(use-package lsp-pyright
  :after lsp-mode
  :hook
  ((python-mode . lsp-deferred)
   (python-mode . (lambda ()
		    (require 'lsp-pyright)
		    (lsp)))))
#+end_src
#+begin_src emacs-lisp
(use-package ein)
#+end_src
** (J|T)S
Web-mode takes care of TypeScript and JavaScript files. The rest is
done with lsp-mode (which might need extra configuration in the future).
#+begin_src emacs-lisp
(use-package web-mode
  :hook
  ((js-mode . web-mode))
  :config
  (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode)))
#+end_src
** Lisps
*** Geiser
Have you read your SICP today?
#+begin_src emacs-lisp
(use-package geiser)
#+end_src
*** Common Lisp
This is mostly for configuring Nyxt browser. I don't use CL for
anything else.
#+begin_src emacs-lisp
(use-package slime
  :custom (inferior-lisp-program "sbcl"))
#+end_src
*** Paredit
[[https://www.emacswiki.org/emacs/ParEdit][paredit]], taught very well [[https://calva.io/paredit/][here]], is very essential to editing
S-expressions.
#+begin_src emacs-lisp
(use-package paredit
  :hook
  ((lisp-mode . paredit-mode)
   (emacs-lisp-mode . paredit-mode)
   (scheme-mode . paredit-mode)))
#+end_src
*** Rainbow
Rainbow delimiters make distinguishing parens much easier when
dealing with deeply nested expressions.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  ((lisp-mode . rainbow-delimiters-mode)
   (emacs-lisp-mode . rainbow-delimiters-mode)
   (scheme-mode . rainbow-delimiters-mode)))
#+end_src
** Haskell
Currently, I use the wondeful haskell-mode.
#+begin_src emacs-lisp
(use-package haskell-mode
  :hook
  ;; Declaration manager (imenu, C-M-* for navigation, etc)
  (haskell-mode . haskell-decl-scan-mode)
  ;; Make it interactive
  (haskell-mode . interactive-haskell-mode)
  ;; Create a template for haskell modules
  (haskell-mode . haskell-auto-insert-module-template)
  ;; :bind
  ;; (:map ("M-." . haskell-mode-jump-to-def-or-tag))
  :custom
  (haskell-font-lock-symbols t)	; Cool symbols
  (haskell-process-suggest-remove-import-lines t)
  (haskell-process-auto-import-loaded-modules t)
  (haskell-process-log t)
  ;; Cabal, stack, or ghci
  (haskell-process-type 'auto))
#+end_src
But lsp-haskell is something that I might replace it with in the near future.
#+begin_src emacs-lisp
;; (use-package lsp-haskell
;;   :after lsp-mode
;;   :hook
;;   ((haskell-mode . lsp)
;;    (haskell-literate-mode . lsp)))
#+end_src
** Proof General
I'm a formal methodist.
#+begin_src emacs-lisp
(use-package proof-general
  :after evil
  :config
  (evil-define-key 'normal coq-mode-map
    (kbd "; ;") 'proof-goto-point)
  (evil-define-key 'normal coq-mode-map
    (kbd "; n") 'proof-assert-next-command-interactive))
#+end_src
** Nix
#+begin_src emacs-lisp
(use-package nix-mode)
#+end_src
*** Direnv
#+begin_src emacs-lisp
(use-package direnv)
#+end_src
** TODO LaTeX
Todo...
* Org
I use [[https://orgmode.org][org-mode]] for pretty much everything.
** Core
~variable-pitch~ is a good face for pretty much everything in org-mode
other than code, so that becomes a mode in org, and for the special
faces that need a monospaced font we inherit from the ~fixed-pitch~ face.
#+name: org-faces
#+begin_src emacs-lisp :tangle no
(add-hook 'org-mode-hook
          (lambda ()
            (variable-pitch-mode 1)))

(dolist (face '(org-code
                org-meta-line
                org-block-end-line
                org-block-begin-line
                org-block
                org-table))
  (set-face-attribute face nil :inherit 'fixed-pitch))
(set-face-attribute 'org-block-end-line nil :inherit 'org-block-begin-line)
;; (set-face-attribute 'org-block-begin-line nil :background nil)
(set-face-attribute 'org-block nil :background nil)
(set-face-attribute 'org-latex-and-related nil :background nil)

;;; Size of the headings
(dolist (face '((org-document-title . 1.5)
		(org-level-1 . 1.35)
		(org-level-2 . 1.3)
		(org-level-3 . 1.25)
		(org-level-4 . 1.2)
		(org-level-5 . 1.15)
		(org-level-6 . 1.1)
		(org-level-7 . 1.05)
		(org-level-8 . 1.0)))
  (set-face-attribute (car face) nil :height (cdr face)))

;;; Replace the default blocks with pwetty icons (from all-the-icons)
(setq-default prettify-symbols-alist
	      '(
		("#+BEGIN_SRC" . "")
		("#+END_SRC" . "")
		("#+begin_src" . "")
		("#+end_src" . "")
		("#+begin_quote" . "")
		("#+end_quote" . "")))

#+end_src

This is the core config.
#+begin_src emacs-lisp :noweb yes
(use-package org
  :after evil
  :defer nil
  :custom
  (org-directory "~/me")
    ;;; Cute lil rice
  (org-startup-indented "⤵")
  (org-startup-with-inline-images t)
  (org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "|" "DONE")))
  (org-hidden-keywords '(title author email date))
  (org-highlight-latex-and-related '(native))
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-hide-block-startup t)
  (org-hide-macro-markers t)
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-default-notes-file (concat org-directory "/notes.org"))
  ;; LaTeX
  (org-format-latex-options
   '(:foreground default
		 :background "Transparent"
		 :scale 2.0
		 :html-foreground "Black"
		 :html-background "Transparent"
		 :html-scale 1.0
		 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))
    ;;; Code blocks
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-confirm-babel-evaluate nil)
  :hook
  ((org-mode . auto-fill-mode)
   (org-mode . prettify-symbols-mode)
   (org-babel-after-execute . org-redisplay-inline-images))
  :config
  <<org-faces>>
    ;;; Evaluate code blocks
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((haskell . t)
     (scheme . t)
     (emacs-lisp . t)
     (python . t)
     (shell . t)
     (dot . t)))
  (evil-define-key 'normal org-mode-map (kbd "; c '") 'org-edit-special)
  (evil-define-key 'normal org-mode-map (kbd "; c t") 'org-babel-tangle)
  (evil-define-key 'normal org-mode-map (kbd "; c s") 'org-insert-structure-template)
  (evil-define-key 'normal org-mode-map (kbd "; l") 'org-insert-link)
  (evil-define-key 'normal org-mode-map (kbd "; t") 'org-todo)
  (evil-define-key 'normal org-mode-map (kbd "; S s") 'org-schedule)
  (evil-define-key 'normal org-mode-map (kbd "; S d") 'org-deadline)
  (evil-define-key 'normal org-mode-map (kbd "; SPC") 'org-ctrl-c-ctrl-c)
  (evil-define-key 'normal org-mode-map (kbd "M-l") 'org-shiftright)
  (evil-define-key 'normal org-mode-map (kbd "M-h") 'org-shiftright)
  (evil-define-key 'normal org-mode-map (kbd "M-k") 'org-shiftup)
  (evil-define-key 'normal org-mode-map (kbd "M-j") 'org-shiftdown)
  (evil-define-key 'normal org-mode-map (kbd "M-K") 'org-metaup)
  (evil-define-key 'normal org-mode-map (kbd "M-J") 'org-metadown)
  (evil-define-key '(normal visual) 'global
    (kbd "; a") 'org-agenda)
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c b" . org-switchb)))
#+end_src
** Capture
#+begin_src emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/me/notes.org" "Tasks")
	 "* TODO %?\n  %i\n  %a")
	("i" "Idea" entry (file+headline "~/me/ideas.org.gpg" "Ideas")
	 "* Idea: %?\n  %i\n  %a")))
#+end_src
** Tempo...
Tempo provides nice shortcuts for inserting structures.
#+begin_src emacs-lisp
(require 'org-tempo)
(dolist (structure '(("sh" . "src shell")
		     ("el" . "src emacs-lisp")
		     ("py" . "src python")
		     ("hs" . "src haskell")))
  (add-to-list 'org-structure-template-alist structure))
#+end_src
** Agenda
#+begin_src emacs-lisp
(setq org-agenda-block-separator "")
(setq org-agenda-skip-scheduled-if-done t)
(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
(use-package org-super-agenda)
#+end_src
#+begin_src emacs-lisp
(use-package org-wild-notifier
  :init
  (org-wild-notifier-mode))
#+end_src
** Roam
#+begin_src emacs-lisp
(use-package org-roam
  :after org
  :custom
  (org-roam-directory "~/roam")
  (org-roam-link-title-format "(→%s)")
  (org-roam-completion-system 'ivy)
  (org-roam-capture-templates
   '(("d" "default" plain
     #'org-roam-capture--get-point "%?"
     :file-name "${slug}"
     :head "#+title: ${title}
"
     :unnarrowed t)
     ("t" "topic" plain
     #'org-roam-capture--get-point "%?"
     :file-name "${slug}"
     :head "#+title: ${title}
,* Resources
- Wikipedia
"
     :unnarrowed t))
   )
  :config
  (let ((roam-dir "~/roam"))
    (when (and (equal system-name "somewhere")
	       (equal user-login-name "someone")
	       (not (file-exists-p roam-dir)))
      (magit-clone-regular"git@github.com:arian-d/knowledge-base"
			roam-dir
			nil)
      (add-hook 'after-init-hook 'org-roam-mode)))
  :bind (("C-M-g" . org-roam-find-file)
	 :map org-roam-mode-map
	 ("C-c i" . org-roam-insert)))
#+end_src
** Bullets
#+begin_src emacs-lisp
(use-package org-superstar
  :after org
  :hook (org-mode . org-superstar-mode)
  :custom
  (org-superstar-leading-bullet ?\s))
#+end_src
** Evil
#+begin_src emacs-lisp
(use-package org-evil
  :after org)
#+end_src
** Calendar
Sync the calendar with my online one. The settings are in =caldav.el=.
#+begin_src emacs-lisp
(use-package org-caldav
  :config
  (let ((caldav-config-file (expand-file-name "caldav.el" user-emacs-directory)))
    (if (file-exists-p caldav-config-file)
	(load-file caldav-config-file))))
#+end_src

** Markdown
Org mode, but for the average pleb.
#+begin_src emacs-lisp
(use-package markdown-mode
  :custom
  (markdown-command '("pandoc" "--from=markdown" "--to=html5")))
#+end_src
** Visual column mode
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (org-mode . (lambda ()
		      (setq visual-fill-column-width 150
			    visual-fill-column-center-text t)
		      (visual-fill-column-mode 1))))
#+end_src
* Misc
** Novel
I may be illiterate, but I still read children's books.
#+begin_src emacs-lisp
(use-package nov
  :config
  (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+end_src
** Elfeed
Daily dose of rabbit holes.
#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed)
  :config
  (let ((feeds-file (expand-file-name "feeds.el" user-emacs-directory)))
    (when (file-exists-p feeds-file)
      (load-file feeds-file))))
#+end_src
** Graphviz
The Graphviz [[https://graphviz.org/doc/info/lang.html][dot]] language, which I mostly use in org-mode.
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :custom (graphviz-dot-indent-width 2))
#+end_src
** Networking
These are some interactive functions that I use occasionally.
#+begin_src emacs-lisp
(defun nmap (host)
  "Nmap a host"
  (interactive "sHost: ")
  (async-shell-command (concat "nmap -Pn " host)))

(defun nmap-service-scan (host)
  "Nmap a host and its services"
  (interactive "sHost: ")
  (async-shell-command (concat "nmap -Pn -sV " host)))

(defun whos-there (host)
  "Check who is logged in on a remote host"
  (interactive "sWhere? ")
  (let ((default-directory (concat "/ssh:" host ":")))
    (async-shell-command "who -u")))
#+end_src
** Docker
Docker do be cool.
#+begin_src emacs-lisp
(use-package docker)
#+end_src
and I also need this for syntax highlighting, and building images in
buffer.
#+begin_src emacs-lisp
(use-package dockerfile-mode)
#+end_src
** System
A function to shut down the machine.
#+begin_src emacs-lisp
(defun shutdown (sure &optional reboot)
  "Shutdown the machine"
  (interactive (list (yes-or-no-p "Are you sure?")))
  (save-some-buffers)
  (if sure (let ((default-directory "/sudo::"))
	     (shell-command (if reboot "reboot" "shutdown")))))

(defun reboot (sure)
  "Reboot the machine"
  (interactive (list (yes-or-no-p "Are you sure?")))
  (shutdown sure t))
#+end_src
** Nix
I have a function to garbage-collect Nix.
#+begin_src emacs-lisp
(defun nix-collect-garbage (deep)
  "Collect nixos garbage"
  (interactive (list (yes-or-no-p "-d?")))
  (async-shell-command (concat "nix-collect-garbage" (if deep " -d" ""))
		       "*Nix Collect Garbage*"))
#+end_src

* Save macros 

#+begin_src 
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
#+end_src
