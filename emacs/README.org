#+title: Emacs Config
#+property: header-args:emacs-lisp :tangle ./init.el :results silent 
#+startup: fold

* Understanding this
** Requirements
Outside of this directory you should see the NixOS config, which would
take care of installing Emacs along with the dependencies. That being
said, if you already have an Emacs installation on your machine and
don't want to install Nix, using [[https://github.com/jwiegley/use-package][use-package]] should take care of
installing the packages if you set ~:ensure~ to ~t~.
** Literate
This configuration is [[https://en.wikipedia.org/wiki/Literate_programming][literate]], as in, the file you're reading /is/ the
actual program. Running ~M-x org-babel-tangle~, or if you trusted the
local variables in Emacs, saving the file would create *and* load the
config for you. Pretty neat, huh?
** Inspiration
Although this is a custom config from scratch, a lot of it is heavily
inspired by many other people such as:
- [[https://github.com/tecosaur/emacs-config][Tecosaur]]'s [[https://github.com/hlissner/doom-emacs][Doom Emacs]] config
- [[https://github.com/daviwil][daviwil]]'s [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ][Emacs from scratch]] Youtube series
- [[https://github.com/joseph8th/literatemacs][joseph8th]]'s config
* Essetials
Just simple stuff to get the ball rolling.
** Lexical binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t -*-
#+end_src

** Which key
The best helper.
#+begin_src emacs-lisp
(use-package which-key
  :custom (which-key-idle-delay 0.5)
  :config
  (which-key-mode))
#+end_src
** Server
This turns on the server so that there would only be one instance of
Emacs running.
#+begin_src emacs-lisp
(use-package server
  :config
  (unless (server-running-p)
    (server-start)))
#+end_src

** Separate ~custom.el~
Rather than cluttering the ~init.el~ file, this uses a separte file for customs.
#+begin_src emacs-lisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load-file custom-file))
#+end_src

** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :after evil
  :custom
  ((ivy-height 15)
   (ivy-use-virtual-buffers t)
   (ivy-count-format "%d/%d "))
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (evil-global-set-key 'normal (kbd "; f") 'counsel-find-file)
  (evil-global-set-key 'normal (kbd "; TAB") 'counsel-M-x)
  (evil-global-set-key 'normal (kbd "; b") 'counsel-switch-buffer))
#+end_src
This just adds function description to ~M-x~ commands
#+begin_src emacs-lisp
(use-package ivy-rich
  :after ivy
  :init
  (ivy-rich-mode 1))
#+end_src
** Evil
The superior keybindings.
*** Chords
~"kj"~ here acts as the escape. This requires the ~use-package-chords~
extension to be enabled.
#+begin_src emacs-lisp
(use-package use-package-chords
  :config (key-chord-mode 1))
#+end_src
*** Evil
Evil, along with some cool keybindings.
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t
        evil-want-keybinding nil)
  :custom (evil-flash-delay 1)
  :config
  (evil-mode 1)
  (evil-global-set-key 'normal (kbd "; q") 'kill-buffer)
  (evil-global-set-key 'normal (kbd "; s") 'save-buffer)
  (evil-global-set-key 'normal (kbd "; g") 'keyboard-quit)
  :chords ("kj" . evil-normal-state))
#+end_src
*** Collection
[[https://github.com/emacs-evil/evil-collection][evil-collection]] provides more bindings, since evil is not fully
complete.
#+begin_src emacs-lisp
(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src
* Appearance
** Defaults
The defaults that come with Emacs are pretty ugly. These settings make
them tolerable.
*** Toolbar
#+begin_src emacs-lisp
(tool-bar-mode -1)
#+end_src
*** Menu bar
#+begin_src emacs-lisp
(menu-bar-mode -1)
#+end_src
*** Scroll bar
#+begin_src emacs-lisp
(set-scroll-bar-mode nil)
#+end_src
*** Splash screen
Replace the default splash screen with an org buffer
#+begin_src emacs-lisp
(setq inhibit-startup-screen t
      inhibit-splash-screen t
      initial-major-mode 'org-mode
      initial-scratch-message "#+TITLE: Scratchpad")
#+end_src

** Face
This the default [[https://www.emacswiki.org/emacs/Face][face]]. It uses a patched version of [[https://fontlibrary.org/en/font/fantasque-sans-mono][Fantasque]] from
[[https://github.com/ryanoasis/nerd-fonts][nerd fonts]].
#+begin_src emacs-lisp
(set-face-attribute 'default nil
		    :width 'expanded
		    :family "FantasqueSansMono Nerd Font"
		    :weight 'normal
		    :height 160)
#+end_src
** Theme
Doom themes are very nice. 
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  (load-theme 'doom-city-lights t)
  (doom-themes-visual-bell-config)
  (doom-themes-org-config))
#+end_src
** Modeline
This is also doom.
#+begin_src emacs-lisp
(use-package doom-modeline
  :after all-the-icons
  :hook (after-init . doom-modeline-mode)
  :custom (doom-modeline-height 15))
#+end_src
*** All the icons
As you see, this package requires ~all-the-icons~ for pretty icons.
#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src
*** Battery
Display battery in modeline.
#+begin_src emacs-lisp
(display-battery-mode 1)
#+end_src
*** Time
Display time in modeline.
#+begin_src emacs-lisp
(display-time-mode 1)
#+end_src
** Shorter boolean prompt
Instead of having to type =yes=, you can just say =y=.
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Development
Afterall, Emacs is a text editor.
** Line numbers
Put line numbers for buffers that should have it.
#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom (display-line-numbers-type 'relative)
  :hook (prog-mode . display-line-numbers-mode))
#+end_src
** Git
Magit
#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)
         :map evil-normal-state-map
         ("; G" . magit-status)))
#+end_src
** TODO Forge
Coming soon...
** Projectile
#+begin_src emacs-lisp
(use-package projectile
  :after evil
  :init
  (projectile-mode +1)
  :config
  (setq projectile-project-search-path '("~/projects/all/")
        projectile-auto-discover nil
        projectile-completion-system 'ivy)
  (evil-global-set-key 'normal (kbd "; p") 'projectile-command-map)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src
and counsel
#+begin_src emacs-lisp
(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src
** Company
Us zoomer programmers can't live without auto-completion.
#+begin_src emacs-lisp
(use-package company-mode
  :hook (after-init . global-company-mode))
#+end_src
** LSP
I use [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] quite extensively for autocompletion, formatting, and
other language features.

#+begin_src emacs-lisp
(use-package lsp-mode
  :custom
  (lsp-keymap-prefix (kbd "; l")))
#+end_src

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] makes things a lot prettier and adds more features.

#+begin_src emacs-lisp
(use-package lsp-ui
  :after lsp-mode)
#+end_src
** Yasnippet
Currently, I don't have that many snippets, but I do use it for lsp
integration.
#+begin_src emacs-lisp
(use-package yasnippt
  :config
  (yas-reload-all)
  :hook (prog-mode . yas-minor-mode))
#+end_src
** C/C++
For C/C++ language servers I use [[https://github.com/MaskRay/ccls][ccls]], but [[https://clangd.llvm.org/][clangd]], which is the
default LSP in lsp-mode, works just as good.
#+begin_src emacs-lisp
(use-package ccls
  :hook ((c-mode c++-mode objc-mode cuda-mode) . lsp-deferred))
#+end_src
** Python
[[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]] is for Microsoft's [[https://github.com/microsoft/pyright][Pyright]] language server which has a
nice typechecker, and I'd prefer it over [[https://github.com/Microsoft/python-language-server][python-language-server]].
#+begin_src emacs-lisp
(use-package lsp-pyright
  :after lsp-mode
  :hook
  ((python-mode . lsp-deferred)
   (python-mode . (lambda ()
		    (require 'lsp-pyright)
		    (lsp)))))
#+end_src
** Lisps
*** Paredit
[[https://www.emacswiki.org/emacs/ParEdit][paredit]], taught very well [[https://calva.io/paredit/][here]], is very essential to editing
S-expressions.
#+begin_src emacs-lisp
(use-package paredit
  :hook
  ((lisp-mode . paredit-mode)
   (emacs-lisp-mode . paredit-mode)
   (scheme-mode . paredit-mode)))
#+end_src
*** Rainbow
Rainbow delimiters make distinguishing parens much easier when
dealing with deeply nested expressions.
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook
  ((lisp-mode . rainbow-delimiters-mode)
   (emacs-lisp-mode . rainbow-delimiters-mode)
   (scheme-mode . rainbow-delimiters-mode)))
#+end_src
** Haskell
Currently, I use the wondeful haskell-mode.
#+begin_src emacs-lisp
(use-package haskell-mode
  :hook
  ;; Declaration manager (imenu, C-M-* for navigation, etc)
  (haskell-mode . haskell-decl-scan-mode)
  ;; Make it interactive
  (haskell-mode . interactive-haskell-mode)
  ;; Create a template for haskell modules
  (haskell-mode . haskell-auto-insert-module-template)
  ;; :bind
  ;; (:map ("M-." . haskell-mode-jump-to-def-or-tag))
  :custom
  (haskell-font-lock-symbols t)	; Cool symbols
  (haskell-process-suggest-remove-import-lines t)
  (haskell-process-auto-import-loaded-modules t)
  (haskell-process-log t)
  ;; Cabal, stack, or ghci
  (haskell-process-type 'auto))
#+end_src
But lsp-haskell is something that I might replace it with in the near future.
#+begin_src emacs-lisp
;; (use-package lsp-haskell
;;   :after lsp-mode
;;   :hook
;;   ((haskell-mode . lsp)
;;    (haskell-literate-mode . lsp)))
#+end_src
** TODO LaTeX
Todo...
* TODO Org
** Core
#+begin_src emacs-lisp
(use-package org
  :after evil
  :ensure nil
  :defer nil
  :custom
  (org-directory "~/me")
  ;;; Cute lil rice
  (org-startup-indented t)
  (org-startup-with-inline-images t)
  (org-hidden-keywords '(title author email date))
  (org-highlight-latex-and-related '(native))
  (org-pretty-entities t)
  (org-hide-emphasis-markers t)
  (org-hide-block-startup t)
  (org-hide-macro-markers t)
  (org-fontify-whole-heading-line t)
  (org-fontify-done-headline t)
  (org-fontify-quote-and-verse-blocks t)
  (org-default-notes-file (concat org-directory "/notes.org"))
  ;;; Code blocks
  (org-src-preserve-indentation t)
  (org-src-tab-acts-natively t)
  (org-confirm-babel-evaluate nil)
  :hook
  ((org-mode . auto-fill-mode)
   (org-mode . prettify-symbols-mode)
   (org-babel-after-execute . org-redisplay-inline-images))
  :config
  ;;; Evaluate code blocks
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((haskell . t)
     (scheme . t)
     (emacs-lisp . t)
     (python . t)
     (shell . t)
     (dot . t)))
  (evil-define-key 'normal org-mode-map (kbd "; c '") 'org-edit-special)
  (evil-define-key 'normal org-mode-map (kbd "; c t") 'org-babel-tangle)
  (evil-define-key 'normal org-mode-map (kbd "; c s") 'org-insert-structure-template)
  (evil-define-key 'normal org-mode-map (kbd "; l") 'org-insert-link)
  (evil-define-key 'normal org-mode-map (kbd "; t") 'org-todo)
  (evil-define-key 'normal org-mode-map (kbd "; S s") 'org-schedule)
  (evil-define-key 'normal org-mode-map (kbd "; S d") 'org-deadline)
  (evil-define-key 'normal org-mode-map (kbd "; SPC") 'org-ctrl-c-ctrl-c)
  (evil-define-key 'normal org-mode-map (kbd "M-l") 'org-shiftright)
  (evil-define-key 'normal org-mode-map (kbd "M-h") 'org-shiftright)
  (evil-define-key 'normal org-mode-map (kbd "M-k") 'org-shiftup)
  (evil-define-key 'normal org-mode-map (kbd "M-j") 'org-shiftdown)
  (evil-define-key 'normal org-mode-map (kbd "M-K") 'org-metaup)
  (evil-define-key 'normal org-mode-map (kbd "M-J") 'org-metadown)
  (evil-define-key '(normal visual) 'global
    (kbd "; a") 'org-agenda)
  :bind
  (("C-c l" . org-store-link)
   ("C-c a" . org-agenda)
   ("C-c c" . org-capture)
   ("C-c b" . org-switchb)))
#+end_src
** Agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :after org
  :ensure nil
  :custom
  (org-agenda-block-separator "")
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled))
#+end_src
** Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :after org
    :custom
    (org-roam-directory "~/roam")
    (org-roam-link-title-format "(→%s)")
    (org-roam-completion-system 'ivy)
    :config
    (add-hook 'after-init-hook 'org-roam-mode)
    :bind (("C-M-g" . org-roam-find-file)
	   :map org-roam-mode-map
	   ("C-c i" . org-roam-insert)))
#+end_src
** Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook
  (org-mode . (lambda () (org-bullets-mode 1))))
#+end_src
** Evil
#+begin_src emacs-lisp
(use-package org-evil
  :after org)
#+end_src
** Google calendar
#+begin_src emacs-lisp
(use-package org-gcal
  :after org
  :defer t
  :config
  (let* ((gcal-creds-file (expand-file-name "gcal-creds.el.gpg" user-emacs-directory))
	 (creds-file-exists (file-exists-p gcal-creds-file)))
    (when creds-file-exists
      (load gcal-creds-file)
      (setq org-gcal-client-id my/gcal-client-id
	    org-gcal-client-secret my/gcal-client-secret
	    org-gcal-fetch-file-alist '(("arianxdehghani@gmail.com" .  "~/me/calendar.org"))))))
#+end_src
** Visual column mode
#+begin_src emacs-lisp
(use-package visual-fill-column
  :hook (org-mode . (lambda ()
		      (setq visual-fill-column-width 100
			    visual-fill-column-center-text t)
		      (visual-fill-column-mode 1))))
#+end_src
* Misc
** Elfeed
Daily dose of rabbit holes.
#+begin_src emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed)
  :config
  (let ((feeds-file (expand-file-name "feeds.el" user-emacs-directory)))
    (when (file-exists-p feeds-file)
      (load-file feeds-file))))
#+end_src
** Graphviz
The Graphviz [[https://graphviz.org/doc/info/lang.html][dot]] language, which I mostly use in org-mode.
#+begin_src emacs-lisp
(use-package graphviz-dot-mode
  :custom (graphviz-dot-indent-width 2))
#+end_src
** Networking
These are some interactive functions that I use occasionally.
#+begin_src emacs-lisp
(defun nmap (host)
  "Nmap a host"
  (interactive "sHost: ")
  (async-shell-command (concat "nmap -Pn " host)))

(defun nmap-service-scan (host)
  "Nmap a host and its services"
  (interactive "sHost: ")
  (async-shell-command (concat "nmap -Pn -sV " host)))

(defun whos-there (host)
  "Check who is logged in on a remote host"
  (interactive "sWhere? ")
  (let ((default-directory (concat "/ssh:" host ":")))
    (async-shell-command "who -u")))
#+end_src
** System
A function to shut down the machine.
#+begin_src emacs-lisp
(defun shutdown (sure &optional reboot)
  "Shutdown the machine"
  (interactive (list (yes-or-no-p "Are you sure?")))
  (save-some-buffers)
  (if sure (let ((default-directory "/sudo::"))
	     (shell-command (if reboot "reboot" "shutdown")))))

(defun reboot (sure)
  "Reboot the machine"
  (interactive (list (yes-or-no-p "Are you sure?")))
  (shutdown sure t))
#+end_src
** Nix
I have a function to garbage-collect Nix.
#+begin_src emacs-lisp
(defun nix-collect-garbage (deep)
  "Collect nixos garbage"
  (interactive (list (yes-or-no-p "-d?")))
  (async-shell-command (concat "nix-collect-garbage" (if deep " -d" ""))
		       "*Nix Collect Garbage*"))
#+end_src

* Save macros 
#+begin_src 
;; Local Variables: 
;; eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
;; eval: (add-hook 'after-save-hook (lambda () (if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
;; End:
#+end_src
